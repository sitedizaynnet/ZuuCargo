
@{
    ViewBag.Title = "Total Cargo ";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

@model IEnumerable<MVCProject.Common.ViewModels.TotalCargoVM>

<!-- daterangepicker -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js"></script>
<script src="/Theme/Admin/plugins/daterangepicker/daterangepicker.js"></script>
<link rel="stylesheet" type="text/css" href="~/Theme/js/datatables.min.css">
<script src="~/Theme/js/jquery.printPage.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript" charset="utf8" src="~/Theme/js/datatables.min.js"></script>
<script type="text/javascript" charset="utf8" src="~/Theme/js/buttons.colVis.min.js"></script>

<script>
    



    function AskYesNo() {
   
        if (confirm('Are you sure you want to DELETE THIS TABLE ?')) {
                window.open('http://www.ZuuCargo.com/Admin/Admin/BackupAndTruncateCargo', '_blank');

                setTimeout(function () {

                    // Something you want delayed.

                }, 1000); // How long you want the delay to be, measured in milliseconds.
                location.reload();


            } else {
                return false;
            }
        


    }


</script>

<div style="overflow: scroll;">
    <p>

        <a class="btn btn-app" href="http://www.ZuuCargo.com/Admin/TotalCargo/Create">

            <i class="fa fa-plus"></i> Create New
        </a>

        <a class="btn btn-app"  id="test" onclick="AskYesNo()" >

            <i class="fa fa-trash-alt"></i> Drop Table
        </a>


        <div id="reportrange" class="btn btn-success btn-lg">

            <span></span> <b class="caret"></b>
        </div>
    </p>

    <table id="table_id">
        <thead>
            <tr>
                <th>Name</th>
                <th>Telephone</th>
                <th>Category</th>
                <th>Expensive</th>
                <th>OrderTotal</th>
                <th>Notes</th>
                <th>Date</th>
               

                <th class="hidden-print">Edit</th>
                <th class="hidden-print">Delete</th>
                <th>SMS Invoice</th>
              
                <th>SMS Arrived</th>
            </tr>
        </thead>
        <tfoot>
            <tr>
                <th></th>
                <th>TOTALS</th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
               


            </tr>
        </tfoot>
    </table>
</div>

@*<script src="~/Theme/js/jquery-1.4.4.min.js" type="text/javascript"></script>*@

<script>
    $(document).ready(function () {
        $(".btnPrint").printPage();
    });
</script>
<script type="text/javascript">
    $(document).ready(function () {
        var oTable =   $('#table_id').DataTable(
            {
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'excel', 'colvis',
                    {
                        extend: 'pdfHtml5',
                        footer: true,
                        title: function () {
                            return "Costs";
                        },
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5, 6]
                        },
                        orientation: 'landscape',
                        pageSize: 'A4',
                        text: '<i class="fa fa-file-pdf-o"> PDF</i>',
                        titleAttr: 'PDF'
                    }

                ],
                autoFill: true,
                colReorder: true,
                fixedColumns: true,
                responsive: false,
                keys: true,
                rowReorder: true,
                select: true,
                ServerSide: true,
                "ajax": {
                    "url": '/TotalCargo/GetTotalCargo/',
                    "type": "get",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "Name", "autoWidth": true },
                    { "data": "Telephone", "autoWidth": true },
                    { "data": "Category", "autoWidth": true },
                    { "data": "Expensive", "autoWidth": true },
                    { "data": "OrderTotal", "autoWidth": true },
                    { "data": "Notes", "autoWidth": true },
                    { "data": "Date", render: function (data, type, full) { return dtConvFromJSON(data); }, "autoWidth": true },
                    {
                        "data": "Id", "width": "50px", "render": function (data) {
                            return '<a  class="hidden-print" href="/Admin/TotalCargo/Edit/' + data + '">Edit</a>';
                        }
                    },
                    {
                        "data": "Id", "width": "50px", "render": function (data) {
                            return '<a  class="hidden-print" href="/Admin/TotalCargo/Delete/' + data + '">Delete</a>';
                        }
                    },

                    {
                        "data": "Id", "width": "50px", "render": function (data) {
                            return '<a target="_blank"  href="/Admin/TotalCargo/PrintInvoice/' + data + '">Invoice</a>';
                        }
                    },
                    {
                        "data": "Id", "width": "50px", "render": function (data) {
                            return '<a class="hidden-print" target="_blank" href="/Admin/TotalCargo/SendInvoiceSMS/' + data + '">SMS Invoice</a>';
                        }
                    },
                    ],
                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;

                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };

                    // Total over all pages
                    total3 = api
                        .column(3, { search: 'applied', page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);
                    total4 = api
                        .column(4, { search: 'applied', page: 'current' })
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);



                    // Update footer

                    $(api.column(3).footer()).html(total3);
                    $(api.column(4).footer()).html(total4);

                }

            });
        new $.fn.dataTable.Buttons(table_id, {
            buttons: [
                'copy', 'excel', 'pdf'

            ]
        });
        // Extend dataTables search


        var start = moment("2021-01-01 12:34:16");
        var end = moment("2021-04-04 10:08:07");

        function cb(start, end) {
            $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        }

        $('#reportrange').daterangepicker({
            startDate: start,
            endDate: end,
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, cb);

        cb(start, end);


        $('#reportrange').on('apply.daterangepicker', function (ev, picker) {
            var start = picker.startDate;
            var end = picker.endDate;


            $.fn.dataTable.ext.search.push(
                function (settings, data, dataIndex) {
                    var min = start;
                    var max = end;
                    var startDate = new Date(data[6]);

                    if (min == null && max == null) {
                        return true;
                    }
                    if (min == null && startDate <= max) {
                        return true;
                    }
                    if (max == null && startDate >= min) {
                        return true;
                    }
                    if (startDate <= max && startDate >= min) {
                        return true;
                    }
                    return false;
                }
            );
            oTable.draw();
            $.fn.dataTable.ext.search.pop();
        });

    })
    function dtConvFromJSON(data) {
        if (data == null) return '1-1-1950';

        var dateFormat = function () {
            var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
                timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
                timezoneClip = /[^-+\dA-Z]/g,
                pad = function (val, len) {
                    val = String(val);
                    len = len || 2;
                    while (val.length < len) val = "0" + val;
                    return val;
                };

            // Regexes and supporting functions are cached through closure
            return function (date, mask, utc) {
                var dF = dateFormat;

                // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
                if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
                    mask = date;
                    date = undefined;
                }

                // Passing date through Date applies Date.parse, if necessary
                date = date ? new Date(date) : new Date;
                if (isNaN(date)) throw SyntaxError("invalid date");

                mask = String(dF.masks[mask] || mask || dF.masks["default"]);

                // Allow setting the utc argument via the mask
                if (mask.slice(0, 4) == "UTC:") {
                    mask = mask.slice(4);
                    utc = true;
                }

                var _ = utc ? "getUTC" : "get",
                    d = date[_ + "Date"](),
                    D = date[_ + "Day"](),
                    m = date[_ + "Month"](),
                    y = date[_ + "FullYear"](),
                    H = date[_ + "Hours"](),
                    M = date[_ + "Minutes"](),
                    s = date[_ + "Seconds"](),
                    L = date[_ + "Milliseconds"](),
                    o = utc ? 0 : date.getTimezoneOffset(),
                    flags = {
                        d: d,
                        dd: pad(d),
                        ddd: dF.i18n.dayNames[D],
                        dddd: dF.i18n.dayNames[D + 7],
                        m: m + 1,
                        mm: pad(m + 1),
                        mmm: dF.i18n.monthNames[m],
                        mmmm: dF.i18n.monthNames[m + 12],
                        yy: String(y).slice(2),
                        yyyy: y,
                        h: H % 12 || 12,
                        hh: pad(H % 12 || 12),
                        H: H,
                        HH: pad(H),
                        M: M,
                        MM: pad(M),
                        s: s,
                        ss: pad(s),
                        l: pad(L, 3),
                        L: pad(L > 99 ? Math.round(L / 10) : L),
                        t: H < 12 ? "a" : "p",
                        tt: H < 12 ? "am" : "pm",
                        T: H < 12 ? "A" : "P",
                        TT: H < 12 ? "AM" : "PM",
                        Z: utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                        o: (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                        S: ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
                    };

                return mask.replace(token, function ($0) {
                    return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
                });
            };
        }();

        // Some common format strings
        dateFormat.masks = {
            "default": "ddd mmm dd yyyy HH:MM:ss",
            shortDate: "m/d/yy",
            mediumDate: "mmm d, yyyy",
            longDate: "mmmm d, yyyy",
            fullDate: "dddd, mmmm d, yyyy",
            shortTime: "h:MM TT",
            mediumTime: "h:MM:ss TT",
            longTime: "h:MM:ss TT Z",
            isoDate: "yyyy-mm-dd",
            isoTime: "HH:MM:ss",
            isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
            isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
        };

        // Internationalization strings
        dateFormat.i18n = {
            dayNames: [
                "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
                "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
            ],
            monthNames: [
                "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
                "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
            ]
        };

        // For convenience...
        Date.prototype.format = function (mask, utc) {
            return dateFormat(this, mask, utc);
        };





        today = new Date();
        var dateString = today.format("dd-m-yy");
        return new Date(parseInt(data.replace('/Date(', ''))).format("mmmm d, yyyy");

    }
   


</script>