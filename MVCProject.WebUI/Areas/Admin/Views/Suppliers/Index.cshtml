
@{
    ViewBag.Title = "Tedarikçiler";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

@using MVCProject.Common.ViewModels
@model SuppliersVM

<h2>Tedarikçiler</h2>

@(Html.Kendo().Grid<SuppliersVM>()
    .Name("Grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.SupplierName).Width(40);
        columns.Bound(p => p.Name).Width(40);
        columns.Bound(p => p.Surname).Width(40);
        columns.Bound(p => p.City).Width(11);
        columns.Bound(p => p.Gsm).Width(11);
        columns.Bound(p => p.CarCount).Width(10);
        columns.Command(command => command.Destroy()).Width(100);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Navigatable()
    .Sortable()
    .Scrollable()
    .DataSource(dataSource => dataSource
        .Custom()
        .Batch(true)
        .PageSize(20)
        .Schema(schema => schema.Model(m => m.Id(p => p.Id)))
        .Transport(transport =>
        {
            transport.Read(read =>
               read.Url("http://demos.telerik.com/kendo-ui/service/products")
                   .DataType("jsonp")
            );
            transport.Create(create =>
               create.Url("http://demos.telerik.com/kendo-ui/service/products/create")
                     .DataType("jsonp")
            );
            transport.Update(update =>
               update.Url("http://demos.telerik.com/kendo-ui/service/products/update")
                     .DataType("jsonp")
            );
            transport.Destroy(destroy =>
               destroy.Url("http://demos.telerik.com/kendo-ui/service/products/destroy")
                      .DataType("jsonp")
            );
            transport.ParameterMap("parameterMap");
        })
    )
)
<script>
    function parameterMap(options, operation) {
        if (operation !== "read" && options.models) {
            return { models: kendo.stringify(options.models) };
        }
    }
</script>